// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PIT.DBL;
using PIT.DBL.Schema;
using System;

namespace PIT.DBL.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("PIT.DBL.Schema.ApplicationUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyID");

                    b.Property<string>("ContactNumber");

                    b.Property<int?>("CreatedID");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("Hash");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<string>("LastName");

                    b.Property<int?>("ModifiedID");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<int>("Status");

                    b.Property<string>("UserName");

                    b.Property<int>("UserType");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PIT.DBL.Schema.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Country");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<string>("PinCode");

                    b.Property<string>("State");

                    b.HasKey("ID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("PIT.DBL.Schema.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.Property<string>("StyleClass");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("PIT.DBL.Schema.MenuTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedID");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("MenuID");

                    b.Property<int?>("ModifiedID");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.HasIndex("MenuID");

                    b.ToTable("MenuTask");
                });

            modelBuilder.Entity("PIT.DBL.Schema.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<int>("RoleForType");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PIT.DBL.Schema.RoleTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MenuTaskID");

                    b.Property<int>("RoleID");

                    b.HasKey("ID");

                    b.HasIndex("MenuTaskID");

                    b.HasIndex("RoleID");

                    b.ToTable("RoleTask");
                });

            modelBuilder.Entity("PIT.DBL.Schema.SubTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MenuTaskID");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.HasIndex("MenuTaskID");

                    b.ToTable("SubTask");
                });

            modelBuilder.Entity("PIT.DBL.Schema.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("PIT.DBL.Schema.ApplicationUser", b =>
                {
                    b.HasOne("PIT.DBL.Schema.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PIT.DBL.Schema.MenuTask", b =>
                {
                    b.HasOne("PIT.DBL.Schema.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PIT.DBL.Schema.RoleTask", b =>
                {
                    b.HasOne("PIT.DBL.Schema.MenuTask", "MenuTask")
                        .WithMany()
                        .HasForeignKey("MenuTaskID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PIT.DBL.Schema.Role", "Role")
                        .WithMany("Tasks")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PIT.DBL.Schema.SubTask", b =>
                {
                    b.HasOne("PIT.DBL.Schema.MenuTask", "MenuTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("MenuTaskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PIT.DBL.Schema.UserRole", b =>
                {
                    b.HasOne("PIT.DBL.Schema.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PIT.DBL.Schema.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
